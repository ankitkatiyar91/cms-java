/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On 16-Apr-2014 for the web application of a portal project
 */
package com.ankit.portal.web.action.cpanel;

import java.util.Date;

import com.ankit.portal.logger.Level;
import com.ankit.portal.logger.Logger;
import com.ankit.portal.service.domain.User;
import com.ankit.portal.service.util.UserUtil;
import com.ankit.portal.util.EncryptUtil;
import com.ankit.portal.util.PropsUtil;
import com.ankit.portal.web.action.PortalAction;

/**
 * @author Ankit
 * 
 */
public class UserResetPassword extends PortalAction {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final Logger LOGGER = new Logger(UserResetPassword.class, Level.INFO);
	private User user;
	private String confirmpassword;
	private String password;
	private Long userId;

	public String resetPassword() {
		try {
			boolean valid = true;
			resetForm();
			if (password == null || password.trim().length() < 6) {
				addFieldError("password", "Enter a password minimum length of 6 character");
				valid = false;
			}
			if (confirmpassword == null || confirmpassword.trim().length() < 6) {
				addFieldError("confirmpassword", "Enter a confirm password minimum length of 6 character");
				valid = false;
			}
			if (valid && (!password.equals(confirmpassword))) {
				addActionError("Password and Confirm Password doesn't match");
				valid = false;
			}

			if (valid) {
				if (PropsUtil.isPASSWORD_ENCRYPTED()) {
					user.setPassword(EncryptUtil.encryptPassword(password));
					user.setPasswordEncrypted(true);
				} else {
					user.setPassword(password);
					user.setPasswordEncrypted(false);
				}
				user.setPasswordModifiedDate(new Date());
				UserUtil.updateUser(user);
				addActionMessage("Password reset successfully");
				return SUCCESS;
			} else {
				return INPUT;
			}
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			this.addActionError("Unable to process " + e.getMessage());
			return INPUT;
		}
	}

	public String resetForm() {
		System.out.println("UserResetPassword.resetForm() userId->" + userId + "  user-" + user);
		LOGGER.log("UserResetPassword.resetForm() userId->" + userId + "  user-" + user);
		System.out.println("Checking condition " + (userId == null));
		if (userId == null) {
			addActionError("Unable to load user try again later");
			return SUCCESS;
		}
		try {
			System.out.println("Fetching user for id " + userId);
			user = UserUtil.getUser(userId);
			System.out.println("Got user " + user);
		} catch (Throwable e) {
			LOGGER.log(e);
			e.printStackTrace();
		}
		if (user == null) {
			addActionError("Unable to load user with id " + userId);
		}
		return SUCCESS;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	public String getConfirmpassword() {
		return confirmpassword;
	}

	public void setConfirmpassword(String confirmpassword) {
		this.confirmpassword = confirmpassword;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Long getUserId() {
		return userId;
	}

	public void setUserId(Long userId) {
		this.userId = userId;
	}

}
