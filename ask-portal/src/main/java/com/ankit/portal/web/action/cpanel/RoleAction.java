/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On Mar 30, 2014 for the web application of a portal project
 */
package com.ankit.portal.web.action.cpanel;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;

import com.ankit.portal.exception.PermissionLacks;
import com.ankit.portal.logger.Level;
import com.ankit.portal.logger.Logger;
import com.ankit.portal.service.domain.Permission;
import com.ankit.portal.service.domain.Role;
import com.ankit.portal.service.util.PermissionUtil;
import com.ankit.portal.service.util.RoleUtil;
import com.ankit.portal.util.SubjectUtil;
import com.ankit.portal.web.action.PortalAction;

/**
 * @author Ankit
 * 
 */
public class RoleAction extends PortalAction {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final Logger LOGGER = new Logger(RoleAction.class,
			Level.INFO);

	private Role role;
	private JSONObject rolesJson;
	private Integer jtStartIndex;
	private Integer jtPageSize;
	private List<Role> roles;
	private Integer roleId;
	private String roleName;
	private Boolean roleModifiable = true;
	private List<Permission> permissions;

	public String listRoles() {
		System.out.println("RoleAction.listRoles()" + jtPageSize + " "
				+ jtStartIndex);
		LOGGER.log("RoleAction.listRoles()" + jtPageSize + " " + jtStartIndex);
		try {
			if (jtPageSize != null && jtStartIndex != null) {
				roles = RoleUtil.getRoles(jtStartIndex, jtPageSize);
			} else {
				roles = RoleUtil.getRoles();
			}
			rolesJson = new JSONObject();

			rolesJson.put("TotalRecordCount", RoleUtil.getRoleCount());
			JSONArray rolesJsonArray = new JSONArray();
			JSONObject jsonObject;
			for (Role role : roles) {
				jsonObject = new JSONObject();
				jsonObject.put("roleId", role.getRoleId());
				jsonObject.put("roleName", role.getName());
				jsonObject.put("roleModifiable", role.getModifiable());
				jsonObject
						.put("createdBy", role.getCreatedBy().getScreenName());
				rolesJsonArray.add(jsonObject);
			}
			rolesJson.put("Result", "OK");
			rolesJson.put("Records", rolesJsonArray);
		} catch (Throwable e) {
			LOGGER.log("List Roles ERROR ", e);
			rolesJson = new JSONObject();
			rolesJson.put("Result", "ERROR");
			rolesJson.put("Message", "Unable to process-" + e.getMessage());
		}
		return "success";
	}

	public String addRole() {
		try {
			rolesJson = new JSONObject();
			System.out.println("roleName->" + roleName + " Modifiable->"
					+ roleModifiable);
			LOGGER.log("roleName->" + roleName + " Modifiable->"
					+ roleModifiable);
			if (roleName == null || roleName.length() == 0) {
				rolesJson.put("Result", "ERROR");
				rolesJson.put("Message", "Role Name can not be blanks");
			} else {
				Long userId = SubjectUtil.getCurrentUserId();
				Integer roleId = RoleUtil.addRole(roleName, userId,
						roleModifiable);
				System.out.println("Role added with id->" + roleId
						+ " from user->" + userId);

				role = RoleUtil.getRole(roleId);
				
				rolesJson.put("Result", "OK");
				JSONObject jsonObject = new JSONObject();
				jsonObject.put("roleId", role.getRoleId());
				jsonObject.put("roleName", role.getName());
				jsonObject.put("roleModifiable", role.getModifiable());
				rolesJson.put("Record", jsonObject);
			}
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("ERROR in adding role ", e);
			
			rolesJson.put("Result", "ERROR");
			rolesJson.put("Message", "Unable to process due to exception-" + e);
		}
		return SUCCESS;
	}

	public String updateRole() {
		try {
			System.out.println("roleName->" + roleName + " Modifiable->"
					+ roleModifiable + " roleId->" + roleId);
			LOGGER.log("roleName->" + roleName + " Modifiable->"
					+ roleModifiable + " roleId->" + roleId);
			if (roleName == null || roleName.length() == 0) {
				rolesJson = new JSONObject();
				rolesJson.put("Result", "ERROR");
				rolesJson.put("Message", "Role Name can not be blanks");
			} else if (roleId == null || roleId == 0) {
				rolesJson = new JSONObject();
				rolesJson.put("Result", "ERROR");
				rolesJson.put("Message", "Role id is not provided");
			} else {
				/*
				 * Check if role modification is disabled then only creator will
				 * be allowed to modify the role
				 */
				Subject subject = SecurityUtils.getSubject();
				Long userId = (Long) subject.getPrincipal();

				try {
					role = RoleUtil.getRole(roleId);
					role.setModifiable(roleModifiable);
					role.setName(roleName);
					System.out.println("updating role " + role + " from user "
							+ userId);

					RoleUtil.updateRole(role, userId);
					System.out.println("Role updated");
					rolesJson = new JSONObject();
					rolesJson.put("Result", "OK");
					JSONObject jsonObject = new JSONObject();
					jsonObject.put("roleId", role.getRoleId());
					jsonObject.put("roleName", role.getName());
					jsonObject.put("roleModifiable", role.getModifiable());
					rolesJson.put("Record", jsonObject);
				} catch (Exception e) {
					e.printStackTrace();
					rolesJson = new JSONObject();
					rolesJson.put("Result", "ERROR");
					rolesJson.put("Message",
							"Unable to process-" + e.getMessage());
				}
			}
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("ERROR in updating role ", e);
		}
		return SUCCESS;
	}

	public String deleteRole() {
		Long userId = getCurrentSubjectId();
		if (roleId == null) {
			rolesJson = new JSONObject();
			rolesJson.put("Result", "ERROR");
			rolesJson.put("Message", "Role id is not provided");
		} else {
			try {
				RoleUtil.deleteRole(roleId, userId);
				rolesJson = new JSONObject();
				rolesJson.put("Result", "OK");
			} catch (Throwable e) {
				LOGGER.log("ERROR in deleting role ", e);
				rolesJson = new JSONObject();
				rolesJson.put("Result", "ERROR");
				rolesJson.put("Message", "Unable to process-" + e.getMessage());
			}
		}
		return SUCCESS;
	}

	public String getRoleOptions() {
		try {
			rolesJson = new JSONObject();
			JSONArray jsonArray = new JSONArray();
			JSONObject tempJsonObject;
			for (Role role : RoleUtil.getRoles()) {
				tempJsonObject = new JSONObject();
				tempJsonObject.put("Value", role.getRoleId());
				tempJsonObject.put("DisplayText", role.getName());
				jsonArray.add(tempJsonObject);
			}
			rolesJson.put("Result", "OK");
			rolesJson.put("Options", jsonArray);
		} catch (Exception ex) {
			ex.printStackTrace();
			LOGGER.log("ERROR in getRoleOptions", ex);
		}
		return SUCCESS;
	}

	public String showRole() {
		permissions = PermissionUtil.getPermissions();
		role = RoleUtil.getRole(roleId);
		permissions.removeAll(role.getPermissions());
		return SUCCESS;
	}

	public String assignPermissions() {
		try {
			String[] permArray = getRequest().getParameterValues("perm");
			System.out.println("roleId->" + roleId + " permissions->"
					+ permissions + " permArray->" + permArray);
			LOGGER.log("Role assign permission roleId->" + roleId
					+ " permissions->" + permissions + " permArray->"
					+ permArray);
			List<Integer> permIds = new ArrayList<Integer>();
			for (String id : permArray) {
				System.out.print(" --" + id);
				try {
					permIds.add(Integer.parseInt(id));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			role = RoleUtil.getRole(roleId);
			System.out.println("Role " + role.getModifiable());
			permissions = PermissionUtil.getPermissions(permIds);
			role.setPermissions(new HashSet<Permission>(permissions));
			RoleUtil.updateRole(role, SubjectUtil.getCurrentUserId());
			rolesJson = new JSONObject();
			rolesJson.put("Result", "OK");
		} catch (PermissionLacks lacks) {
			rolesJson = new JSONObject();
			rolesJson.put("Result",
					"Sorry You are not authorized for this operation!");
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("ERROR in assigning permissions ", e);
			rolesJson = new JSONObject();
			rolesJson.put("Result", "Unable to process try gain later!");

		}
		return SUCCESS;
	}

	public Role getRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	public JSONObject getRolesJson() {
		return rolesJson;
	}

	public void setRolesJson(JSONObject rolesJson) {
		this.rolesJson = rolesJson;
	}

	public List<Role> getRoles() {
		return roles;
	}

	public void setRoles(List<Role> roles) {
		this.roles = roles;
	}

	public Integer getJtStartIndex() {
		return jtStartIndex;
	}

	public void setJtStartIndex(Integer jtStartIndex) {
		this.jtStartIndex = jtStartIndex;
	}

	public Integer getJtPageSize() {
		return jtPageSize;
	}

	public void setJtPageSize(Integer jtPageSize) {
		this.jtPageSize = jtPageSize;
	}

	public Integer getRoleId() {
		return roleId;
	}

	public void setRoleId(Integer roleId) {
		this.roleId = roleId;
	}

	public String getRoleName() {
		return roleName;
	}

	public void setRoleName(String roleName) {
		this.roleName = roleName;
	}

	public Boolean getRoleModifiable() {
		return roleModifiable;
	}

	public void setRoleModifiable(Boolean roleModifiable) {
		this.roleModifiable = roleModifiable;
	}

	public List<Permission> getPermissions() {
		return permissions;
	}

	public void setPermissions(List<Permission> permissions) {
		this.permissions = permissions;
	}

}
