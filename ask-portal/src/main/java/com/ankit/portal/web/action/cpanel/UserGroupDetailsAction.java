/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On 15-Apr-2014 for the web application of a portal project
 */
package com.ankit.portal.web.action.cpanel;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.hibernate.Session;

import com.ankit.portal.hibernate.util.HibernateUtil;
import com.ankit.portal.logger.Level;
import com.ankit.portal.logger.Logger;
import com.ankit.portal.service.domain.Role;
import com.ankit.portal.service.domain.User;
import com.ankit.portal.service.domain.UserGroup;
import com.ankit.portal.service.util.RoleUtil;
import com.ankit.portal.service.util.UserGroupUtil;
import com.ankit.portal.util.Util;
import com.ankit.portal.web.action.PortalAction;

/**
 * @author Ankit
 * 
 */
public class UserGroupDetailsAction extends PortalAction {

	private static final long serialVersionUID = 1L;
	private static final Logger LOGGER = new Logger(UserGroupDetailsAction.class, Level.INFO);
	private JSONObject userGroupJson;
	private Integer jtPageSize;
	private Integer jtStartIndex;
	private UserGroup group;
	private Integer assignRoleId;
	private Integer roleId;

	public String showDetails() {
		try {
			System.out.println("UserGroupDetailsAction.showDetails() " + group.getId());
			LOGGER.log("UserGroupDetailsAction.showDetails() " + group.getId());
			group = UserGroupUtil.getUserGroup(group.getId());
			if (group == null) {
				addActionError(getText("failed"));
				addActionError("No user find with id #" + group.getId());
			} else {
				addActionMessage(getText("success"));
			}
		} catch (Throwable ex) {
			ex.printStackTrace();
			LOGGER.log(ex);
			addActionError(getText("failed"));
		}
		return SUCCESS;
	}

	public String getUsers() {
		System.out.println("UserGroupDetailsAction.getUsers() " + " group id->" + group.getId());
		LOGGER.log("UserGroupDetailsAction.getUsers() " + " group id->" + group.getId());
		try {
			List<User> users;
			if (jtPageSize != null && jtStartIndex != null) {
				users = UserGroupUtil.getUsers(group.getId(), jtStartIndex, jtPageSize);
			} else {
				users = UserGroupUtil.getUsers(group.getId(), 0, 10);
			}
			userGroupJson = new JSONObject();

			userGroupJson.put("TotalRecordCount", UserGroupUtil.getTotalUsers(group.getId()));
			JSONArray usersJsonArray = new JSONArray();
			JSONObject jsonObject;
			final DateFormat dateFormat=new SimpleDateFormat(Util.DATE_TIME_FORMAT);
			for (User user : users) {
				jsonObject = new JSONObject();
				jsonObject.put("id", user.getId());
				jsonObject.put("firstName", user.getFirstName());
				jsonObject.put("lastName", user.getFirstName());
				jsonObject.put("email", user.getEmail());
				jsonObject.put("created", dateFormat.format(user.getCreated()));
				usersJsonArray.add(jsonObject);
			}
			userGroupJson.put("Result", "OK");
			userGroupJson.put("Records", usersJsonArray);
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			userGroupJson = new JSONObject();
			userGroupJson.put("Result", "ERROR");
			userGroupJson.put("Message", "Unable to process-" + e.getMessage());
		}
		return SUCCESS;
	}

	public String getRoles() {
		System.out.println("RoleAction.listRoles()->jtStartIndex->" + jtStartIndex + " jtPageSize ->" + jtPageSize + " group id->" + group.getId());

		LOGGER.log("RoleAction.listRoles()->jtStartIndex->" + jtStartIndex + " jtPageSize ->" + jtPageSize + " group id->" + group.getId());
		try {
			List<Role> roles = new ArrayList<Role>();
			if (jtPageSize != null && jtStartIndex != null) {
				// roles.addAll(UserGroupUtil.getUserGroup(group.getId()).getRoles());
				Session session = HibernateUtil.getSession();
				group = (UserGroup) session.get(UserGroup.class, group.getId());
				System.out.println("\n\n\n\nRoles in set-->" + group.getRoles() + " \n\n");
				roles.addAll(group.getRoles());
				session.clear();
				HibernateUtil.closeSession();
			} else {
				// roles = UserGroupUtil.getRoles(group.getId(), 0, 10);
				Session session = HibernateUtil.getSession();
				group = (UserGroup) session.get(UserGroup.class, group.getId());
				roles.addAll(group.getRoles());
				session.clear();
				HibernateUtil.closeSession();
			}
			System.out.println("Got roles->" + roles + " " + roles.size());
			userGroupJson = new JSONObject();
			userGroupJson.put("TotalRecordCount", roles.size());
			JSONArray rolesJsonArray = new JSONArray();
			JSONObject jsonObject;
			for (Role role : roles) {
				jsonObject = new JSONObject();
				jsonObject.put("roleId", role.getRoleId());
				jsonObject.put("roleName", role.getName());
				jsonObject.put("roleModifiable", role.getModifiable());
				jsonObject.put("createdBy", role.getCreatedBy().getScreenName());
				rolesJsonArray.add(jsonObject);
			}
			userGroupJson.put("Result", "OK");
			userGroupJson.put("Records", rolesJsonArray);
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			userGroupJson = new JSONObject();
			userGroupJson.put("Result", "ERROR");
			userGroupJson.put("Message", "Unable to process-" + e.getMessage());
		}
		return "success";
	}

	public String assignRole() {
		System.out.println("UserGroupDetailsAction.assignRole() assignRoleId->" + assignRoleId + "  Group ID->" + group.getId());
		LOGGER.log("UserGroupDetailsAction.assignRole() assignRoleId->" + assignRoleId + "  Group ID->" + group.getId());
		try {
			UserGroupUtil.addRole(group.getId(), assignRoleId);
			Role role = RoleUtil.getRole(assignRoleId);
			userGroupJson = new JSONObject();
			userGroupJson.put("Result", "OK");
			JSONObject jsonObject = new JSONObject();
			jsonObject.put("roleId", role.getRoleId());
			jsonObject.put("roleName", role.getName());
			jsonObject.put("createdBy", role.getCreatedBy().getScreenName());
			userGroupJson.put("Record", jsonObject);
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.log(e);
			userGroupJson = new JSONObject();
			userGroupJson.put("Result", "ERROR");
			userGroupJson.put("Message", "Unable to process-" + e.getMessage());
		}
		return SUCCESS;
	}

	public String removeRole() {
		System.out.println("UserGroupDetailsAction.removeRole()" + assignRoleId + " RoleId" + roleId);
		System.out.println("UserGroupDetailsAction.removeRole() assignRoleId->" + assignRoleId + " RoleId" + roleId + "  Group ID->" + group.getId());
		LOGGER.log("UserGroupDetailsAction.removeRole() assignRoleId->" + assignRoleId + " RoleId" + roleId + "  Group ID->" + group.getId());
		try {
			UserGroupUtil.removeRole(group.getId(), assignRoleId);
			userGroupJson = new JSONObject();
			userGroupJson.put("Result", "OK");
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			userGroupJson = new JSONObject();
			userGroupJson.put("Result", "ERROR");
			userGroupJson.put("Message", "Unable to process-" + e.getMessage());
		}
		return SUCCESS;
	}

	public JSONObject getUserGroupJson() {
		return userGroupJson;
	}

	public void setUserGroupJson(JSONObject userGroupJson) {
		this.userGroupJson = userGroupJson;
	}

	public Integer getJtPageSize() {
		return jtPageSize;
	}

	public void setJtPageSize(Integer jtPageSize) {
		this.jtPageSize = jtPageSize;
	}

	public Integer getJtStartIndex() {
		return jtStartIndex;
	}

	public void setJtStartIndex(Integer jtStartIndex) {
		this.jtStartIndex = jtStartIndex;
	}

	public UserGroup getGroup() {
		return group;
	}

	public void setGroup(UserGroup group) {
		this.group = group;
	}

	public Integer getAssignRoleId() {
		return assignRoleId;
	}

	public void setAssignRoleId(Integer assignRoleId) {
		this.assignRoleId = assignRoleId;
	}

	public Integer getRoleId() {
		return roleId;
	}

	public void setRoleId(Integer roleId) {
		this.roleId = roleId;
	}

}
