/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On 17-Apr-2014 for the web application of a portal project
 */
package com.ankit.portal.web.action.cpanel;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import com.ankit.portal.exception.ServiceException;
import com.ankit.portal.logger.Level;
import com.ankit.portal.logger.Logger;
import com.ankit.portal.service.domain.Menu;
import com.ankit.portal.service.util.MenuUtil;
import com.ankit.portal.support.StatusType;
import com.ankit.portal.util.Util;
import com.ankit.portal.web.action.PortalAction;

/**
 * @author Ankit
 * 
 */
public class MenusAction extends PortalAction {

	private static final Logger LOGGER = new Logger(MenusAction.class, Level.DEBUG);
	private static final long serialVersionUID = 1L;
	private JSONObject menuJsonObject;
	private Menu menu;
	private List<Menu> menus;
	private Integer menuAfter;

	public String list() {
		LOGGER.log("Menu List action Invoked");
		try {
			List<Menu> menus = MenuUtil.getMenusOrderedBySequenceNo(0, 0);
			menuJsonObject = new JSONObject();
			JSONArray menuJsonArray = new JSONArray();
			JSONObject jsonObject;
			DateFormat dateFormat = new SimpleDateFormat(Util.DATE_TIME_FORMAT);
			for (Menu menu : menus) {
				jsonObject = new JSONObject();
				jsonObject.put("id", menu.getId());
				jsonObject.put("created", dateFormat.format(menu.getCreated()));
				jsonObject.put("lastUpdated", dateFormat.format(menu.getLastUpdated()));
				jsonObject.put("label", menu.getLabel());
				jsonObject.put("sequence", menu.getSequenceNo());
				jsonObject.put("status", menu.getStatus());
				menuJsonArray.add(jsonObject);
			}
			menuJsonObject.put("list", menuJsonArray);
		} catch (ServiceException e) {
			e.printStackTrace();
			LOGGER.log("Problem in menu action", e);
		}
		return SUCCESS;
	}

	public String showAddForm() {
		try {
			menus = MenuUtil.getMenusOrderedBySequenceNo(0, 0);
		} catch (Throwable ex) {
			addActionError("Form is not loaded properly try refreshing it");
			LOGGER.log(ex);
		}
		return SUCCESS;
	}

	public String add() {
		boolean error = false;
		try {
			System.out.println("MenusAction.add() " + menu.getLabel() + " menuAfter->" + menuAfter);
			if (menu.getLabel() == null || menu.getLabel().trim().length() < 1) {
				addActionError("Menu Label can not be blank");
				error = true;
				return INPUT;
			}
			if (MenuUtil.getMenuByLabel(menu.getLabel()) != null) {
				addActionError("One menu already exist with label '" + menu.getLabel() + "' try some other");
				error = true;
				return INPUT;
			}
			/*
			 * IF Sequence no is not provided so set to max no. To add it to
			 * last ELSE Add sequence no to particular place
			 */
			if (menuAfter == null) {
				Integer maxSeqNo = MenuUtil.maxSequenceNo();
				if (maxSeqNo == null || maxSeqNo == 0) {
					maxSeqNo = 1;
				}
				menu.setSequenceNo(maxSeqNo);
			} else {
				Menu menuAfterObj = MenuUtil.getMenu(menuAfter);
				MenuUtil.updateSequenceBefore(menuAfterObj.getSequenceNo(), -1);
				menu.setSequenceNo(menuAfterObj.getSequenceNo());
			}
			/*
			 * Set status as SAVE
			 */
			menu.setStatus(StatusType.SAVE);
			menu.setId(MenuUtil.addMenu(menu));
			addActionMessage("Menu added successfully");
		} catch (Throwable ex) {
			ex.printStackTrace();
			addActionError("Unable to process");
			LOGGER.log(ex);
			return INPUT;
		} finally {
			if (error) {
				showAddForm();
			}
		}
		return SUCCESS;
	}

	public String viewDetails() {
		try {
			menu = MenuUtil.getMenu(menu.getId());
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("ERROR in loading Menu Object ", e);
		}
		return SUCCESS;
	}

	public String moveUp() {
		System.out.println("MenusAction.moveUp() " + menuAfter);
		try {
			menus = MenuUtil.getMenusOrderedBySequenceNo(0, 0);
			int menuIndex = 0, tempSeqNo;
			for (int i = 0; i < menus.size(); i++) {
				if (menus.get(i).getId() == menuAfter) {
					menuIndex = i;
					break;
				}
			}
			/*
			 * if category found at 0th index make it 1
			 */
			menuIndex = menuIndex == 0 ? 1 : menuIndex;
			tempSeqNo = menus.get(menuIndex).getSequenceNo();
			menus.get(menuIndex).setSequenceNo(menus.get(menuIndex - 1).getSequenceNo());
			menus.get(menuIndex - 1).setSequenceNo(tempSeqNo);
			MenuUtil.updateMenu(menus.get(menuIndex));
			MenuUtil.updateMenu(menus.get(menuIndex - 1));
			menuJsonObject = new JSONObject();
			menuJsonObject.put("status", "OK");
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			menuJsonObject = new JSONObject();
			menuJsonObject.put("status", "ERROR");
		}
		return SUCCESS;
	}

	public String moveDown() {
		System.out.println("MenusAction.moveDown() " + menuAfter);
		try {
			menus = MenuUtil.getMenusOrderedBySequenceNo(0, 0);
			int menuIndex = 0, tempSeqNo;
			for (int i = 0; i < menus.size(); i++) {
				if (menus.get(i).getId() == menuAfter) {
					menuIndex = i;
					break;
				}
			}
			menuIndex = menuIndex == menus.size() - 1 ? menus.size() - 2 : menuIndex;
			tempSeqNo = menus.get(menuIndex).getSequenceNo();
			menus.get(menuIndex).setSequenceNo(menus.get(menuIndex + 1).getSequenceNo());
			menus.get(menuIndex + 1).setSequenceNo(tempSeqNo);
			MenuUtil.updateMenu(menus.get(menuIndex));
			MenuUtil.updateMenu(menus.get(menuIndex + 1));
			menuJsonObject = new JSONObject();
			menuJsonObject.put("status", "OK");
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			menuJsonObject = new JSONObject();
			menuJsonObject.put("status", "ERROR");
		}
		return SUCCESS;
	}

	public String updateStatus() {
		try {
			StatusType status = menu.getStatus();
			menu = MenuUtil.getMenu(menu.getId());
			menu.setStatus(status);
			MenuUtil.updateMenu(menu);
			addActionMessage("Status updated successfully");
		} catch (Throwable ex) {
			LOGGER.log(ex);
			addActionError("Unable to process");
		}
		return SUCCESS;
	}

	public String update() {
		try {
			System.out.println("Menu-->" + menu);
			String label = menu.getLabel();
			menu = MenuUtil.getMenu(menu.getId());
			menu.setLabel(label);
			MenuUtil.updateMenu(menu);

			JSONObject tempJsonObject = new JSONObject();
			tempJsonObject.put("lastUpdated", new SimpleDateFormat(Util.DATE_TIME_FORMAT).format(menu.getLastUpdated()));
			tempJsonObject.put("label", menu.getLabel());

			menuJsonObject = new JSONObject();
			menuJsonObject.put("menu", tempJsonObject);
			menuJsonObject.put("RESULT", "OK");
		} catch (Throwable ex) {
			LOGGER.log(ex);
			ex.printStackTrace();
			menuJsonObject = new JSONObject();
			menuJsonObject.put("RESULT", "ERROR");
		}
		return SUCCESS;
	}
	

	public JSONObject getMenuJsonObject() {
		return menuJsonObject;
	}

	public void setMenuJsonObject(JSONObject menuJsonObject) {
		this.menuJsonObject = menuJsonObject;
	}

	public Menu getMenu() {
		return menu;
	}

	public void setMenu(Menu menu) {
		this.menu = menu;
	}

	public List<Menu> getMenus() {
		return menus;
	}

	public void setMenus(List<Menu> menus) {
		this.menus = menus;
	}

	public Integer getMenuAfter() {
		return menuAfter;
	}

	public void setMenuAfter(Integer menuAfter) {
		this.menuAfter = menuAfter;
	}

}
