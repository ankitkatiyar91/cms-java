/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On 27-May-2014 for the web application of a portal project
 */
package com.ankit.portal.web.action.cpanel;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import com.ankit.portal.logger.Level;
import com.ankit.portal.logger.Logger;
import com.ankit.portal.service.domain.Article;
import com.ankit.portal.service.util.ArticleUtil;
import com.ankit.portal.service.util.UserUtil;
import com.ankit.portal.support.StatusType;
import com.ankit.portal.util.SubjectUtil;
import com.ankit.portal.util.UUIDUtil;
import com.ankit.portal.util.Util;
import com.ankit.portal.web.action.PortalAction;

/**
 * @author Ankit
 * 
 */
public class ArticleAction extends PortalAction {

	private static final long serialVersionUID = 1L;
	private static final Logger LOGGER = new Logger(ArticleAction.class, Level.INFO);

	private Article article;
	private Long articleId;
	private String uuid;
	private String content;
	private String title;
	private String meta;
	private JSONObject jsonObject;
	private Integer status;

	private Integer jtPageSize;

	private Integer jtStartIndex;

	public String save() {
		try {
			System.out.println("ArticleAction.save() article->" + article);
			System.out.println("Content->" + content + "  articleId->" + articleId + " title->" + title+" meta->"+meta);
			LOGGER.log("ArticleAction.save() Content->" + content + "  articleId->" + articleId + " title->" + title+" meta->"+meta);
			jsonObject = new JSONObject();
			final DateFormat dateFormat = new SimpleDateFormat(Util.DATE_TIME_FORMAT);
			/*
			 * Validate
			 */
			if (title == null || title.trim().length() == 0) {
				jsonObject.put("RESULT", "ERROR");
				jsonObject.put("ERROR", "Title can not be blank");
				return INPUT;
			}

			if (content != null && content.length() > 1) {

				if (articleId != null) {
					article = ArticleUtil.getArticle(articleId);
					System.out.println("Old UUID->" + article.getUuid());
					/*
					 * Find if any changes made in Article
					 */
					if (!(article.getTitle().equals(title)
							&& article.getContent().equals(content) && (article.getMeta()!=null && article.getMeta().equals(meta)))) {
						/*
						 Check if Lastarticle wasPUBLISHED < br >Create a newversionVersioning issttoped as notrequired in thisAPP 30 - APR -2014if ( article .getStatus ( ) .equals (StatusType .PUBLISHED ) ) {double version =article .getVersion ( ) .intValue ( ) + 1; article .setStatus (StatusType . SAVE) ; article .setVersion (version ) ;article .setTitle ( title) ; article .setContent (content ) ;article .setCreatedBy (UserUtil .getUser (SubjectUtil .getCurrentUserId( ) ) ) ;ArticleUtil .addArticle (article ) ;System . out .println ("New article created because previous was updated") ; LOGGER . log("New article created because previous was updated") ; } else {Check if differetuser is editingthen create newversion < br > ORIf user makingchanges in an oldversion thencreate a newversionif ( article .getCreatedBy ( )!= null && ! (article .getCreatedBy ( ). getId ( ) .equals (SubjectUtil .getCurrentUserId( ) ) ) ) {double version =article .getVersion ( ) +0.1 ; article .setVersion (version ) ;article .setTitle ( title) ; article .setContent (content ) ;article .setCreatedBy (UserUtil .getUser (SubjectUtil .getCurrentUserId( ) ) ) ;ArticleUtil .addArticle (article ) ;System . out .println ("New added beacuse user was not same"+ version ) ;LOGGER . log ("New added beacuse user was not same"+ version ) ; }else {Same user makingchanges so keepit as it wasarticle .setTitle ( title) ; article .setContent (content ) ;ArticleUtil .updateArticle (article ) ;System . out .println ("Old updated " +article .getArticleId ( )) ; LOGGER . log( "Old updated "+ article .getArticleId ( )) ; }}
						 */
						article.setTitle(title);
						article.setContent(content);
						article.setMeta(meta);
						ArticleUtil.updateArticle(article);
						System.out.println("Old updated "
								+ article.getArticleId());
						LOGGER.log("Old updated " + article.getArticleId());
					}
				} else {
					System.out.println("Article id is not available so creating a new article");
					article = new Article();
					article.setUuid(UUIDUtil.getRandomUuid());
					article.setStatus(StatusType.SAVE);
					article.setTitle(title);
					article.setContent(content);
					article.setMeta(meta);
					article.setCreatedBy(UserUtil.getUser(SubjectUtil.getCurrentUserId()));
					ArticleUtil.addArticle(article);
					System.out.println("New article created because doesn't exist");
					LOGGER.log("New article created because doesn't exist");
				}
			}

			jsonObject.put("RESULT", "OK");
			jsonObject.put("savedAt", dateFormat.format(new Date()));
			jsonObject.put("id", article.getArticleId());
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("ERROR in Article save ", e);
			jsonObject.put("RESULT", "ERROR");
			jsonObject.put("ERROR", e.getMessage());
		}
		return SUCCESS;
	}

	public String list() {
		try {
			String searchQuery = getRequest().getParameter("searchQuery");
			List<Article> articles;

			System.out.println("\nArticleAction.list() uuid->" + uuid + "  jtPageSize->" + jtPageSize + " jtStartIndex->"
					+ jtStartIndex + " status-" + status + " search" + searchQuery);
			LOGGER.log("ArticleAction.list() uuid->" + uuid + "  jtPageSize->" + jtPageSize + " jtStartIndex->"
					+ jtStartIndex + " status-" + status + " search" + searchQuery);

			jsonObject = new JSONObject();
			if (jtPageSize == null) {
				jtPageSize = 10;
			}
			if (jtStartIndex == null) {
				jtStartIndex = 0;
			}

			if (uuid != null) {
				articles = ArticleUtil.getArticlesByUUID(uuid, jtStartIndex, jtPageSize);
				jsonObject.put("TotalRecordCount", ArticleUtil.getTotalArticlesByUUID(uuid));
			} else if (status != null || searchQuery != null) {
				StatusType statusType = (status == null ? null : (status == 0 ? StatusType.SAVE : StatusType.PUBLISHED));
				articles = ArticleUtil.searchArticle(searchQuery, statusType, jtStartIndex, jtPageSize);
				System.out.println("Total found article--" + articles.size());
				jsonObject.put("TotalRecordCount", ArticleUtil.searchArticleCount(searchQuery, statusType));
			} else {
				articles = ArticleUtil.getLatestArticles(jtStartIndex, jtPageSize);
				jsonObject.put("TotalRecordCount", ArticleUtil.getTotalLatestArticles());
			}

			JSONArray articlesJSONArray = new JSONArray();
			JSONObject tempJson;
			final DateFormat dateFormat = new SimpleDateFormat(Util.DATE_TIME_FORMAT);
			for (Article article : articles) {
				tempJson = new JSONObject();
				tempJson.put("uuid", article.getUuid());
				tempJson.put("articleId", article.getArticleId());
				tempJson.put("title", article.getTitle());
				tempJson.put("createdBy", article.getCreatedBy().getScreenName());
				tempJson.put("lastModified", dateFormat.format(article.getLastUpdated()));
				tempJson.put("status", article.getStatus());
				articlesJSONArray.add(tempJson);
			}
			jsonObject.put("Result", "OK");
			jsonObject.put("Records", articlesJSONArray);
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("Error in listing Article ", e);
			jsonObject = new JSONObject();
			jsonObject.put("Result", "ERROR");
			jsonObject.put("Message", "Unable to load list of Articles-" + e);
		}
		return SUCCESS;
	}

	public String editForm() {
		if (articleId != null) {
			article = ArticleUtil.getArticle(articleId);
		} else if (uuid != null) {
			article = ArticleUtil.getLatestVersionByUUID(uuid);
		}

		return SUCCESS;
	}

	public String publish() {
		try {
			System.out.println("Article Id->" + articleId);
			article = ArticleUtil.publishArticle(articleId);
			addActionMessage("Article published successfully");
		} catch (Throwable ex) {
			ex.printStackTrace();
			LOGGER.log("ERROR in publishing Article ", ex);
			addActionError("Failed to publish your Article");
		}
		return SUCCESS;
	}

	public String delete() {
		try {
			System.out.println("Article Id->" + articleId);
			ArticleUtil.deleteArticle(articleId);
			addActionMessage("Article deleted successfully");
		} catch (Throwable ex) {
			ex.printStackTrace();
			addActionError("Failed to delete your Article");
		}
		return SUCCESS;
	}

	public Article getArticle() {
		return article;
	}

	public void setArticle(Article article) {
		this.article = article;
	}

	public void setJsonObject(JSONObject jsonObject) {
		this.jsonObject = jsonObject;
	}

	public JSONObject getJsonObject() {
		return jsonObject;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public Long getArticleId() {
		return articleId;
	}

	public void setArticleId(Long articleId) {
		this.articleId = articleId;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getMeta() {
		return meta;
	}

	public void setMeta(String meta) {
		this.meta = meta;
	}

	public String getUuid() {
		return uuid;
	}

	public void setUuid(String uuid) {
		this.uuid = uuid;
	}

	public Integer getJtPageSize() {
		return jtPageSize;
	}

	public void setJtPageSize(Integer jtPageSize) {
		this.jtPageSize = jtPageSize;
	}

	public Integer getJtStartIndex() {
		return jtStartIndex;
	}

	public void setJtStartIndex(Integer jtStartIndex) {
		this.jtStartIndex = jtStartIndex;
	}

	public Integer getStatus() {
		return status;
	}

	public void setStatus(Integer status) {
		this.status = status;
	}

}
