/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On 22-Apr-2014 for the web application of a portal project
 */
package com.ankit.portal.web.action.cpanel;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.hibernate.exception.ConstraintViolationException;

import com.ankit.portal.logger.Logger;
import com.ankit.portal.service.domain.Category;
import com.ankit.portal.service.domain.Menu;
import com.ankit.portal.service.util.CategoryUtil;
import com.ankit.portal.service.util.MenuUtil;
import com.ankit.portal.support.StatusType;
import com.ankit.portal.util.Util;
import com.ankit.portal.web.action.PortalAction;

/**
 * @author Ankit
 * 
 */
public class CategoryAction extends PortalAction {

	private static final long serialVersionUID = 1L;
	private static final Logger LOGGER = new Logger(CategoryAction.class.toString());
	private JSONObject categoryJson;
	private Category category;
	private List<Menu> menus;
	private Integer menuId;
	private Integer categoryId;

	public String list() {
		try {
			categoryJson = new JSONObject();
			categoryJson.put("RESULT", "OK");
			final DateFormat dateFormat = new SimpleDateFormat(Util.DATE_TIME_FORMAT);
			List<Category> categories = CategoryUtil.getCategoriesByMenuIdOrderedBySequenceNo(menuId, 0, 0);

			JSONArray categoryJsonArray = new JSONArray();
			JSONObject jsonObject;
			for (Category category : categories) {
				jsonObject = new JSONObject();
				jsonObject.put("id", category.getId());
				jsonObject.put("created", dateFormat.format(category.getCreated()));
				jsonObject.put("lastUpdated", dateFormat.format(category.getLastUpdated()));
				jsonObject.put("label", category.getLabel());
				jsonObject.put("sequence", category.getSequenceNo());
				jsonObject.put("status", category.getStatus());
				categoryJsonArray.add(jsonObject);
			}
			categoryJson.put("list", categoryJsonArray);
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("ERROR in listing Category Action ", e);
			categoryJson = new JSONObject();
			categoryJson.put("RESULT", "ERROR");
			categoryJson.put("MESSAGE", "Unable to list Categories contact Administrator");
		}
		return SUCCESS;
	}

	public String add() {
		boolean error = false;
		try {
			if (category.getLabel() == null || category.getLabel().trim().length() < 1) {
				addActionError("Enter a valid category");
				error = true;
				return INPUT;
			}
			if (category.getMenu().getId() == null) {
				addActionError("Select a Parent Menu");
				error = true;
				return INPUT;
			}

			int menuId = category.getMenu().getId();
			Integer seq = CategoryUtil.getMaxSequence();
			if (seq == null) {
				seq = 0;
			}
			category.setSequenceNo(seq + 1);
			category.setMenu(MenuUtil.getMenu(menuId));
			category.setStatus(StatusType.SAVE);
			CategoryUtil.addCategory(category);
			return SUCCESS;
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("Error adding category", e);
		} finally {
			if (error) {
				addForm();
			}
		}
		return INPUT;
	}

	public String addForm() {
		try {
			menus = MenuUtil.getMenus();
		} catch (Throwable e) {
			e.printStackTrace();
			addActionError("Form is not loaded properly try refreshing it");
			LOGGER.log(e);
		}
		return SUCCESS;
	}

	public String viewDetails() {
		try {
			category = CategoryUtil.getCategory(category.getId());
		} catch (Throwable e) {
			addActionError("Unable to process");
			LOGGER.log("Error in Category View", e);
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String updateStatus() {
		try {
			StatusType status = category.getStatus();
			category = CategoryUtil.getCategory(category.getId());
			category.setStatus(status);
			category = CategoryUtil.updateCategory(category);
			addActionMessage("Status updated successfully");
		} catch (Throwable ex) {
			LOGGER.log(ex);
			addActionError("Unable to process");
		}
		return SUCCESS;
	}

	/**
	 * Move a Category UP
	 */
	public String moveUp() {
		try {
			category = CategoryUtil.getCategory(categoryId);
			List<Category> categories = CategoryUtil.getCategoriesByMenuIdOrderedBySequenceNo(category.getMenu().getId(), 0, 0);
			int categoryIndex = 0, tempSeqNo;

			for (int i = 0; i < categories.size(); i++) {
				if (categories.get(i).getId() == categoryId) {
					categoryIndex = i;
					break;
				}
			}
			/*
			 * if category found at 0th index make it 1
			 */
			categoryIndex = categoryIndex == 0 ? 1 : categoryIndex;
			tempSeqNo = categories.get(categoryIndex).getSequenceNo();
			if (tempSeqNo == categories.get(categoryIndex - 1).getSequenceNo()) {
				tempSeqNo++;
			}
			categories.get(categoryIndex).setSequenceNo(categories.get(categoryIndex - 1).getSequenceNo());
			categories.get(categoryIndex - 1).setSequenceNo(tempSeqNo);
			CategoryUtil.updateCategory(categories.get(categoryIndex));
			CategoryUtil.updateCategory(categories.get(categoryIndex - 1));

			categoryJson = new JSONObject();
			categoryJson.put("status", "OK");
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			categoryJson = new JSONObject();
			categoryJson.put("status", "ERROR");
		}
		return SUCCESS;
	}

	/**
	 * Move a Category Down
	 */
	public String moveDown() {
		try {
			category = CategoryUtil.getCategory(categoryId);
			List<Category> categories = CategoryUtil.getCategoriesByMenuIdOrderedBySequenceNo(category.getMenu().getId(), 0, 0);
			int categoryIndex = 0, tempSeqNo;

			for (int i = 0; i < categories.size(); i++) {
				if (categories.get(i).getId() == categoryId) {
					categoryIndex = i;
					break;
				}
			}
			/*
			 * if category found at 1st index make it 0
			 */
			categoryIndex = categoryIndex == categories.size() - 1 ? categories.size() - 2 : categoryIndex;
			tempSeqNo = categories.get(categoryIndex).getSequenceNo();

			categories.get(categoryIndex).setSequenceNo(categories.get(categoryIndex + 1).getSequenceNo());
			categories.get(categoryIndex + 1).setSequenceNo(tempSeqNo);
			CategoryUtil.updateCategory(categories.get(categoryIndex));
			CategoryUtil.updateCategory(categories.get(categoryIndex + 1));

			categoryJson = new JSONObject();
			categoryJson.put("status", "OK");
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			categoryJson = new JSONObject();
			categoryJson.put("status", "ERROR");
		}
		return SUCCESS;
	}

	public String update() {
		try {
			String label = category.getLabel();
			category = CategoryUtil.getCategory(category.getId());
			category.setLabel(label);
			CategoryUtil.updateCategory(category);
			final DateFormat dateFormat = new SimpleDateFormat(Util.DATE_TIME_FORMAT);
			JSONObject tempJsonObject = new JSONObject();
			tempJsonObject.put("lastUpdated", dateFormat.format(category.getLastUpdated()));
			tempJsonObject.put("label", category.getLabel());

			categoryJson = new JSONObject();
			categoryJson.put("category", tempJsonObject);
			categoryJson.put("RESULT", "OK");
		} catch (ConstraintViolationException ex) {
			categoryJson = new JSONObject();
			categoryJson.put("RESULT", "ERROR");
			categoryJson.put("MESSAGE", "Can not change to this Label try some other");
		} catch (Throwable ex) {
			LOGGER.log(ex);
			ex.printStackTrace();
			categoryJson = new JSONObject();
			categoryJson.put("RESULT", "ERROR");
			categoryJson.put("MESSAGE", "Unable to process");
		}
		return SUCCESS;
	}

	public JSONObject getCategoryJson() {
		return categoryJson;
	}

	public void setCategoryJson(JSONObject categoryJson) {
		this.categoryJson = categoryJson;
	}

	public Category getCategory() {
		return category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	public List<Menu> getMenus() {
		return menus;
	}

	public void setMenus(List<Menu> menus) {
		this.menus = menus;
	}

	public Integer getMenuId() {
		return menuId;
	}

	public void setMenuId(Integer menuId) {
		this.menuId = menuId;
	}

	public Integer getCategoryId() {
		return categoryId;
	}

	public void setCategoryId(Integer categoryId) {
		this.categoryId = categoryId;
	}

}