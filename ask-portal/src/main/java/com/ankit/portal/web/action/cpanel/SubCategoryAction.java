/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On 15-May-2014 for the web application of a portal project
 */
package com.ankit.portal.web.action.cpanel;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.hibernate.exception.ConstraintViolationException;

import com.ankit.portal.exception.NoSuchElementException;
import com.ankit.portal.logger.Logger;
import com.ankit.portal.service.domain.Category;
import com.ankit.portal.service.domain.Menu;
import com.ankit.portal.service.domain.SubCategory;
import com.ankit.portal.service.util.CategoryUtil;
import com.ankit.portal.service.util.MenuUtil;
import com.ankit.portal.service.util.SubCategoryUtil;
import com.ankit.portal.support.StatusType;
import com.ankit.portal.util.Util;
import com.ankit.portal.web.action.PortalAction;

/**
 * @author Ankit
 * 
 */
public class SubCategoryAction extends PortalAction {

	private static final long serialVersionUID = 1L;
	private static final Logger LOGGER = new Logger(SubCategoryAction.class.toString());
	private List<Category> categories;
	private List<Menu> menus;
	private JSONObject jsonObject;
	private Integer menuId, categoryId;
	private SubCategory subCategory;
	private Long subCategoryId;

	public String showListPage() {
		try {
			menus = MenuUtil.getMenus();
		} catch (Throwable ex) {
			addActionMessage("Unable to process");
			LOGGER.log("Error in loading list options of sub category display", ex);
		}
		return SUCCESS;
	}

	public String listSubCategories() {
		try {
			jsonObject = new JSONObject();
			jsonObject.put("RESULT", "OK");
			JSONArray categoryJsonArray = new JSONArray();
			JSONObject tempJsonObject;
			DateFormat dateFormat = new SimpleDateFormat(Util.DATE_TIME_FORMAT);
			List<SubCategory> categories = SubCategoryUtil.getSubCategoriesByCategoryIdOrderedBySequenceNo(categoryId, 0, 0);

			for (SubCategory category : categories) {
				tempJsonObject = new JSONObject();
				tempJsonObject.put("id", category.getId());
				tempJsonObject.put("created", dateFormat.format(category.getCreated()));
				tempJsonObject.put("lastUpdated", dateFormat.format(category.getLastUpdated()));
				tempJsonObject.put("label", category.getLabel());
				tempJsonObject.put("sequence", category.getSequenceNo());
				tempJsonObject.put("status", category.getStatus());
				categoryJsonArray.add(tempJsonObject);
			}
			jsonObject.put("list", categoryJsonArray);
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("ERROR listSubCategories", e);
			jsonObject = new JSONObject();
			jsonObject.put("RESULT", "ERROR");
		}
		return SUCCESS;
	}

	public String add() {
		System.out.println("SubCategoryAction.add() " + subCategory);
		LOGGER.log("SubCategoryAction.add() " + subCategory);
		boolean hasError = false;
		try {
			if (subCategory.getLabel() == null || subCategory.getLabel().trim().length() < 1) {
				addActionError("Enter a valid Sub Category");
				hasError = true;
				return INPUT;
			}
			if (subCategory.getCategory() == null || subCategory.getCategory().getId() == null || subCategory.getCategory().getId() < 1) {
				addActionError("Select a Parent Category");
				hasError = true;
				return INPUT;
			}
			categoryId = subCategory.getCategory().getId();
			Category category = null;
			try {
				category = CategoryUtil.getCategory(categoryId);
			} catch (Exception e) {
				e.printStackTrace();
			}

			if (category == null) {
				addActionError("Select a valid Parent Category");
				hasError = true;
				return INPUT;
			}
			Integer seq = SubCategoryUtil.getMaxSequence();
			if (seq == null) {
				seq = 0;
			}
			subCategory.setSequenceNo(seq + 1);
			subCategory.setCategory(category);
			subCategory.setStatus(StatusType.SAVE);
			SubCategoryUtil.addSubCategory(subCategory);
			return SUCCESS;

		} catch (ConstraintViolationException ex) {
			addActionError("Choose another Label");
			hasError = true;
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			hasError = true;
		} finally {
			System.out.println("hasError->"+hasError);
			if (hasError) {
				showListPage();
			}
		}
		return INPUT;
	}

	public String viewDetails() {
		try {
			subCategory = SubCategoryUtil.getSubCategory(subCategory.getId());
		} catch (NoSuchElementException e) {
			addActionError("Unable to process");
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public String updateStatus() {
		try {
			StatusType status = subCategory.getStatus();
			subCategory = SubCategoryUtil.getSubCategory(subCategory.getId());
			subCategory.setStatus(status);
			SubCategoryUtil.updateSubCategory(subCategory);
			addActionMessage("Status updated successfully");
		} catch (Throwable ex) {
			LOGGER.log(ex);
			addActionError("Unable to process");
		}
		return SUCCESS;
	}

	/**
	 * Move a Sub Category UP
	 */
	public String moveUp() {
		try {
			subCategory = SubCategoryUtil.getSubCategory(subCategoryId);
			List<SubCategory> categories = SubCategoryUtil.getSubCategoriesByCategoryIdOrderedBySequenceNo(subCategory.getCategory().getId(), 0, 0);
			int categoryIndex = 0, tempSeqNo;

			for (int i = 0; i < categories.size(); i++) {
				if (categories.get(i).getId() == subCategoryId) {
					categoryIndex = i;
					break;
				}
			}
			/*
			 * if category found at 0th index make it 1
			 */
			categoryIndex = categoryIndex == 0 ? 1 : categoryIndex;
			tempSeqNo = categories.get(categoryIndex).getSequenceNo();
			if (tempSeqNo == categories.get(categoryIndex - 1).getSequenceNo()) {
				tempSeqNo++;
			}
			categories.get(categoryIndex).setSequenceNo(categories.get(categoryIndex - 1).getSequenceNo());
			categories.get(categoryIndex - 1).setSequenceNo(tempSeqNo);
			System.out.println("Updating--\n" + categories.get(categoryIndex) + "\n" + categories.get(categoryIndex - 1));

			SubCategoryUtil.updateSubCategory(categories.get(categoryIndex));
			SubCategoryUtil.updateSubCategory(categories.get(categoryIndex - 1));

			jsonObject = new JSONObject();
			jsonObject.put("status", "OK");
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			jsonObject = new JSONObject();
			jsonObject.put("status", "ERROR");
		}
		return SUCCESS;
	}

	/**
	 * Move a Category Down
	 */
	public String moveDown() {
		try {
			System.out.println("SubCategoryAction.moveDown() " + subCategoryId);
			subCategory = SubCategoryUtil.getSubCategory(subCategoryId);
			List<SubCategory> categories = SubCategoryUtil.getSubCategoriesByCategoryIdOrderedBySequenceNo(subCategory.getCategory().getId(), 0, 0);
			System.out.println("List->" + categories);
			int categoryIndex = 0, tempSeqNo;

			for (int i = 0; i < categories.size(); i++) {
				if (categories.get(i).getId() == subCategoryId) {
					categoryIndex = i;
					break;
				}
			}
			/*
			 * if category found at 1st index make it 0
			 */
			categoryIndex = categoryIndex == categories.size() - 1 ? categories.size() - 2 : categoryIndex;
			tempSeqNo = categories.get(categoryIndex).getSequenceNo();
			System.out.println("Updating--\n" + categories.get(categoryIndex) + "\n" + categories.get(categoryIndex + 1));
			categories.get(categoryIndex).setSequenceNo(categories.get(categoryIndex + 1).getSequenceNo());
			categories.get(categoryIndex + 1).setSequenceNo(tempSeqNo);
			System.out.println("Updating--\n" + categories.get(categoryIndex) + "\n" + categories.get(categoryIndex + 1));
			SubCategoryUtil.updateSubCategory(categories.get(categoryIndex));
			SubCategoryUtil.updateSubCategory(categories.get(categoryIndex + 1));

			jsonObject = new JSONObject();
			jsonObject.put("status", "OK");
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log(e);
			jsonObject = new JSONObject();
			jsonObject.put("status", "ERROR");
		}
		return SUCCESS;
	}

	public String update() {
		try {
			String label = subCategory.getLabel();
			final DateFormat dateFormat = new SimpleDateFormat(Util.DATE_TIME_FORMAT);
			subCategory = SubCategoryUtil.getSubCategory(subCategory.getId());
			subCategory.setLabel(label);
			SubCategoryUtil.updateSubCategory(subCategory);

			JSONObject tempJsonObject = new JSONObject();
			tempJsonObject.put("lastUpdated", dateFormat.format(subCategory.getLastUpdated()));
			tempJsonObject.put("label", subCategory.getLabel());

			jsonObject = new JSONObject();
			jsonObject.put("subCategory", tempJsonObject);
			jsonObject.put("RESULT", "OK");
		} catch (ConstraintViolationException ex) {
			jsonObject = new JSONObject();
			jsonObject.put("RESULT", "ERROR");
			jsonObject.put("MESSAGE", "Can not change to this Label try some other");
		} catch (Throwable ex) {
			LOGGER.log(ex);
			ex.printStackTrace();
			jsonObject = new JSONObject();
			jsonObject.put("RESULT", "ERROR");
			jsonObject.put("MESSAGE", "Unable to process");
		}
		return SUCCESS;
	}

	public String delete() {
		try {
			System.out.println("SubCategoryAction.delete() id->" + subCategory.getId());
			// subCategory =
			// SubCategoryUtil.getSubCategory(subCategory.getId());
			SubCategoryUtil.deleteSubCategory(subCategory.getId());
			addActionMessage("Deleted successfully");
		} catch (Throwable e) {
			addActionError("Unable to process");
			e.printStackTrace();
		}
		return SUCCESS;
	}

	public List<Category> getCategories() {
		return categories;
	}

	public void setCategories(List<Category> categories) {
		this.categories = categories;
	}

	public List<Menu> getMenus() {
		return menus;
	}

	public void setMenus(List<Menu> menus) {
		this.menus = menus;
	}

	public JSONObject getJsonObject() {
		return jsonObject;
	}

	public void setJsonObject(JSONObject jsonObject) {
		this.jsonObject = jsonObject;
	}

	public Integer getMenuId() {
		return menuId;
	}

	public void setMenuId(Integer menuId) {
		this.menuId = menuId;
	}

	public Integer getCategoryId() {
		return categoryId;
	}

	public void setCategoryId(Integer categoryId) {
		this.categoryId = categoryId;
	}

	public SubCategory getSubCategory() {
		return subCategory;
	}

	public void setSubCategory(SubCategory subCategory) {
		this.subCategory = subCategory;
	}

	public Long getSubCategoryId() {
		return subCategoryId;
	}

	public void setSubCategoryId(Long subCategoryId) {
		this.subCategoryId = subCategoryId;
	}

}
