/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On 12-Apr-2014 for the web application of a portal project
 */
package com.ankit.portal.web.action.cpanel;

import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;

import com.ankit.portal.logger.Level;
import com.ankit.portal.logger.Logger;
import com.ankit.portal.service.domain.UserGroup;
import com.ankit.portal.service.util.UserGroupUtil;
import com.ankit.portal.service.util.UserUtil;
import com.ankit.portal.web.action.PortalAction;

/**
 * @author Ankit
 * 
 */
public class UserGroupAction extends PortalAction {

	private static final long serialVersionUID = 1L;
	private static final Logger LOGGER = new Logger(UserGroupAction.class, Level.INFO);
	private JSONObject userGroupJson;
	private Integer jtPageSize;
	private Integer jtStartIndex;
	private Long userGroupId;
	private String userGroupName;
	private String userGroupComments;

	public String listUserGroups() {
		System.out.println("UserGroup List" + jtPageSize + " " + jtStartIndex);
		LOGGER.log("UserGroup List" + jtPageSize + " " + jtStartIndex);
		try {
			List<UserGroup> userGroupList;
			if (jtPageSize != null && jtStartIndex != null) {
				userGroupList = UserGroupUtil.getUserGroups(jtStartIndex, jtPageSize);
			} else {
				userGroupList = UserGroupUtil.getUserGroups(0, 10);
			}
			userGroupJson = new JSONObject();

			userGroupJson.put("TotalRecordCount", UserGroupUtil.getUserGroupCount());
			JSONArray userGroupJsonArray = new JSONArray();
			JSONObject jsonObject;
			for (UserGroup group : userGroupList) {
				jsonObject = new JSONObject();
				jsonObject.put("userGroupId", group.getId());
				jsonObject.put("userGroupName", group.getName());
				jsonObject.put("userGroupComments", group.getComments());
				jsonObject.put("createdBy", group.getCreatedBy().getScreenName());
				userGroupJsonArray.add(jsonObject);
			}
			userGroupJson.put("Result", "OK");
			userGroupJson.put("Records", userGroupJsonArray);
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("Error in listing user group ", e);
			userGroupJson = new JSONObject();
			userGroupJson.put("Result", "ERROR");
			userGroupJson.put("Message", "Unable to load list of Groups-" + e.getMessage());
		}
		return SUCCESS;
	}

	public String addUserGroups() {
		try {
			System.out.println("userGroupName->" + userGroupName + " Comments->" + userGroupComments);
			LOGGER.log("userGroupName->" + userGroupName + " Comments->" + userGroupComments);
			if (userGroupName == null || userGroupName.length() == 0) {
				userGroupJson = new JSONObject();
				userGroupJson.put("Result", "ERROR");
				userGroupJson.put("Message", "Group Name can not be blanks");
			} else {

				Subject subject = SecurityUtils.getSubject();
				Long userId = (Long) subject.getPrincipal();
				UserGroup group = new UserGroup();
				group.setName(userGroupName);
				group.setComments(userGroupComments);
				group.setCreatedBy(UserUtil.getUser(userId));
				try {
					group = UserGroupUtil.addUserGroup(group);
				} catch (Exception e) {
					userGroupJson = new JSONObject();
					userGroupJson.put("Result", "ERROR");
					userGroupJson.put("Message", "Unable to add this group");
					return SUCCESS;
				}
				System.out.println("User Group added with id->" + group.getId() + " from user->" + userId);

				userGroupJson = new JSONObject();
				userGroupJson.put("Result", "OK");
				JSONObject jsonObject = new JSONObject();
				jsonObject.put("userGroupId", group.getId());
				jsonObject.put("userGroupName", group.getName());
				jsonObject.put("userGroupComments", group.getComments());
				jsonObject.put("createdBy", group.getCreatedBy().getScreenName());
				userGroupJson.put("Record", jsonObject);
			}
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("UserGroupAction addUserGroups", e);
		}
		return SUCCESS;
	}

	public String updateUserGroups() {
		try {
			System.out.println("userGroupName->" + userGroupName + " Comments->" + userGroupComments);
			LOGGER.log("userGroupName->" + userGroupName + " Comments->" + userGroupComments);
			if (userGroupName == null || userGroupName.length() == 0) {
				userGroupJson = new JSONObject();
				userGroupJson.put("Result", "ERROR");
				userGroupJson.put("Message", "Group Name can not be blanks");
			} else {
				UserGroup group = UserGroupUtil.getUserGroup(userGroupId);
				group.setName(userGroupName);
				group.setComments(userGroupComments);
				try {
					UserGroupUtil.updateUserGroup(group);
				} catch (Exception e) {
					userGroupJson = new JSONObject();
					userGroupJson.put("Result", "ERROR");
					userGroupJson.put("Message", "Unable to update this group");
					return SUCCESS;
				}
				userGroupJson = new JSONObject();
				userGroupJson.put("Result", "OK");
				JSONObject jsonObject = new JSONObject();
				jsonObject.put("userGroupId", group.getId());
				jsonObject.put("userGroupName", group.getName());
				jsonObject.put("userGroupComments", group.getComments());
				jsonObject.put("createdBy", group.getCreatedBy().getScreenName());
				userGroupJson.put("Record", jsonObject);
			}
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("updateUserGroups", e);
		}
		return SUCCESS;
	}

	public String delete() {
		try {
			System.out.println("userGroupId->" + userGroupId);
			LOGGER.log("DELETE User Group userGroupId->" + userGroupId);
			UserGroupUtil.deleteUserGroup(userGroupId);
			userGroupJson = new JSONObject();
			userGroupJson.put("Result", "OK");
			userGroupJson.put("Message", "Group updated Successfully");
		} catch (Throwable e) {
			e.printStackTrace();
			LOGGER.log("USer Group delete error ", e);
			userGroupJson = new JSONObject();
			userGroupJson.put("Result", "ERROR");
			userGroupJson.put("Message", "Unable to load list of Groups-" + e.getMessage());
		}
		return SUCCESS;
	}

	public JSONObject getUserGroupJson() {
		return userGroupJson;
	}

	public void setUserGroupJson(JSONObject userGroupJson) {
		this.userGroupJson = userGroupJson;
	}

	public Integer getJtPageSize() {
		return jtPageSize;
	}

	public void setJtPageSize(Integer jtPageSize) {
		this.jtPageSize = jtPageSize;
	}

	public Integer getJtStartIndex() {
		return jtStartIndex;
	}

	public void setJtStartIndex(Integer jtStartIndex) {
		this.jtStartIndex = jtStartIndex;
	}

	public Long getUserGroupId() {
		return userGroupId;
	}

	public void setUserGroupId(Long userGroupId) {
		this.userGroupId = userGroupId;
	}

	public String getUserGroupName() {
		return userGroupName;
	}

	public void setUserGroupName(String userGroupName) {
		this.userGroupName = userGroupName;
	}

	public String getUserGroupComments() {
		return userGroupComments;
	}

	public void setUserGroupComments(String userGroupComments) {
		this.userGroupComments = userGroupComments;
	}

}