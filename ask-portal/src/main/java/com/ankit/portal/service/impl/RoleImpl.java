/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On Mar 21, 2014 for the hibernate services of a portal project
 */
package com.ankit.portal.service.impl;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;

import com.ankit.portal.exception.PermissionLacks;
import com.ankit.portal.hibernate.util.HibernateUtil;
import com.ankit.portal.service.dao.RoleDAO;
import com.ankit.portal.service.domain.Permission;
import com.ankit.portal.service.domain.Role;
import com.ankit.portal.service.util.UserUtil;

/**
 * @author Ankit
 * 
 */
public class RoleImpl implements RoleDAO {

    /*
     * (non-Javadoc)
     * 
     * @see com.ankit.portal.service.dao.RoleDAO#getRoles()
     */
    @SuppressWarnings("unchecked")
    @Override
    public List<Role> getRoles() {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.createQuery("from Role");
            query.setCacheable(true);
            List<Role> roles = query.list();
            return roles;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.ankit.portal.service.dao.RoleDAO#getRole(java.lang.Integer)
     */
    @Override
    public Role getRole(Integer roleId) {
        try {
            Session session = HibernateUtil.getSession();
            Role role = (Role) session.get(Role.class, roleId);
            return role;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.ankit.portal.service.dao.RoleDAO#addRole(com.ankit.portal.service
     * .domain.Role)
     */
    @Override
    public Integer addRole(Role role) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            Integer id = (Integer) session.save(role);
            session.getTransaction().commit();
            return id;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.ankit.portal.service.dao.RoleDAO#updateRole(com.ankit.portal.service
     * .domain.Role)
     */

    private void updateRole(Role role) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            session.update(role);
            session.getTransaction().commit();
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Long getRoleCount() {
        try {
            Session session = HibernateUtil.getSession();
            org.hibernate.Query query = session
                    .createQuery("select count(*) as c from Role");
            query.setCacheable(true);
            Long count = (Long) query.uniqueResult();
            return count;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public List<Role> getRoles(Integer firstResult, Integer maxResults) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.createQuery("from Role");
            query.setFirstResult(firstResult);
            query.setMaxResults(maxResults);
            query.setCacheable(true);
            @SuppressWarnings("unchecked")
            List<Role> roles = query.list();
            return roles;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Integer addRole(String roleName, Long createdBy, Boolean modifiable) {
        try {

            Role role = new Role();
            role.setCreatedBy(UserUtil.getUser(createdBy));
            role.setName(roleName);
            role.setModifiable(modifiable);
            Integer id = (Integer) HibernateUtil.getSessionWithTrasaction()
                    .save(role);
            return id;
        } finally {
            HibernateUtil.closeSessionWithTransaction();
        }
    }

    @Override
    public void updateRole(Role role, Long updatingUserId)
            throws PermissionLacks {

        Integer roleId = role.getRoleId();
        Role oldRole = getRole(roleId);
        if (oldRole.getCreatedBy().getId() == updatingUserId) {
            updateRole(role);
        } else if (oldRole.getModifiable() == true
                && (oldRole.getModifiable() == role.getModifiable())) {
            /*
             * Role is allowed to be modified and user is not modifing it's
             * modification feature
             */
            updateRole(role);
        } else if (UserUtil.getUser(updatingUserId).isAdmin()) {
            /*
             * User is Admin so it can make any kind of changes
             */
            updateRole(role);
        } else {
            throw new PermissionLacks(
                    "This user is not allowed to update this role");
        }

    }

    @Override
    public void deleteRole(Integer roleId, Long deletingUserId)
            throws Exception {
        Session session = HibernateUtil.getSession();
        session.beginTransaction();
        try {
            Role role = (Role) session.get(Role.class, roleId);
            if (role.getCreatedBy().getId() == deletingUserId) {
                session.delete(role);
            } else if (UserUtil.getUser(deletingUserId).isAdmin()) {
                session.delete(role);
            } else {
                throw new PermissionLacks(
                        "Only owner or Admin can delete a Role");
            }
        } catch (Exception e) {
            throw e;
        } finally {
            session.getTransaction().commit();
            HibernateUtil.closeSession();
        }

    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Role> getRoles(Integer... roleIds) {
        try {
            Session sesion = HibernateUtil.getSession();
            Query query = sesion
                    .createQuery("from Role where roleId in(:roleIds)");
            query.setParameterList("roleIds", roleIds);
            List<Role> list = query.list();
            return list;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Permission> loadPermissions(Integer roleId) {
        try {
            Session sesion = HibernateUtil.getSession();
            Query query = sesion.getNamedQuery("LoadPermissions");
            query.setParameter(0, roleId);
            List<Permission> list = query.list();
            return list;
        } finally {
            HibernateUtil.closeSession();
        }
    }

}
