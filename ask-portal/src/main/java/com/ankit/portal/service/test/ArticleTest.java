/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On Mar 2, 2014 for the hibernate services of a portal project
 */
package com.ankit.portal.service.test;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.search.FullTextSession;
import org.hibernate.search.Search;
import org.hibernate.search.query.DatabaseRetrievalMethod;
import org.hibernate.search.query.ObjectLookupMethod;
import org.hibernate.search.query.dsl.QueryBuilder;

import com.ankit.portal.hibernate.util.HibernateUtil;
import com.ankit.portal.service.domain.Article;
import com.ankit.portal.service.util.ArticleUtil;

/**
 * @author Ankit
 * 
 */
public class ArticleTest {

    /**
     * @param args
     */
    public static void main(String[] args) {
        System.out.println("Test Initiated");
        for(Article article:ArticleUtil.getLatestArticles(0, 10)){
            System.out.println(article.getArticleId()+" -- "+article.getUuid());
        }

    }

    public static void testFullText() {

        try {/*
              * System.out.println("ArticleTest.main()"); Session session =
              * HibernateUtil.getSession();
              * System.out.println("Session Opened"); Query
              * query=session.getNamedQuery("GetArticleLatestVersionByUUID");
              * query.setParameter("uuid",
              * "dd09f074-687c-4b7c-9cba-409f1a89581e");
              * System.out.println("GetArticleLatestVersionByUUID");
              * System.out.println("Got->"+query.list());
              * HibernateUtil.closeSession();
              * 
              * System.out.println("ArticleUtil.getTotalArticles()"+ArticleUtil.
              * getTotalArticles());
              * System.out.println("---"+ArticleUtil.getTotalArticlesByUUID
              * ("dd09f074-687c-4b7c-9cba-409f1a89581e")); for (int i = 0; i <
              * 5; i++) { ArticleUtil.getArticle(1L); System.out.println(i);
              * if(i==3){ HibernateUtil.clearCache(); } }
              */
            Session session = HibernateUtil.getSession();
            FullTextSession fullTextSession;
            /*
             * System.out.println("Building Index"); fullTextSession =
             * org.hibernate.search.Search.getFullTextSession(session);
             * fullTextSession.createIndexer(Article.class).startAndWait();
             */

            /*
             * Search.getFullTextSession(HibernateUtil.getSession()); //new
             * SearchFactoryBuilder().buildSearchFactory().buildQueryBuilder()
             * SearchFactoryBuilder builder=new SearchFactoryBuilder();
             * QueryContextBuilder
             * queryBuilder=builder.buildSearchFactory().buildQueryBuilder();
             * Query
             * query=queryBuilder.forEntity(Article.class).get().keyword().
             * onField("title").matching("test*").createQuery();
             * 
             * fullTextSession=Search.getFullTextSession(session); List<Article>
             * list=fullTextSession.createFullTextQuery(query,
             * Article.class).list(); for (Article article : list) {
             * System.out.println(article); }
             */

            System.out.println("Building query");
            fullTextSession = Search.getFullTextSession(session);
            Transaction tx = fullTextSession.beginTransaction();

            // create native Lucene query unsing the query DSL
            // alternatively you can write the Lucene query using the Lucene
            // query parser
            // or the Lucene programmatic API. The Hibernate Search DSL is
            // recommended though
            QueryBuilder qb = fullTextSession.getSearchFactory()
                    .buildQueryBuilder().forEntity(Article.class).get();
            org.apache.lucene.search.Query query = qb.keyword()
                    .onFields("title", "content").matching("test")
                    .createQuery();

            // wrap Lucene query in a org.hibernate.Query
            org.hibernate.search.FullTextQuery hibQuery = fullTextSession
                    .createFullTextQuery(query, Article.class);

            System.out.println("fetching result");

            System.out.println("Max Results->" + hibQuery.getResultSize());

            hibQuery.setMaxResults(3);

            hibQuery.initializeObjectsWith(
                    ObjectLookupMethod.SECOND_LEVEL_CACHE,
                    DatabaseRetrievalMethod.QUERY);

            // execute search
            List<Article> result = hibQuery.list();
            System.out.println("Got Results " + result.size());
            for (Article article : result) {
                System.out.println(article.getArticleId() + "  "
                        + article.getTitle());
            }
            //
            result = hibQuery.list();
            System.out.println("Got Results " + result.size());
            for (Article article : result) {
                System.out.println(article.getArticleId() + "  "
                        + article.getTitle());
            }

        } catch (Throwable e) {
            e.printStackTrace();
        } finally {
            HibernateUtil.closeSession();
        }

    }

}
