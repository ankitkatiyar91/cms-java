/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On Mar 21, 2014 for the hibernate services of a portal project
 */
package com.ankit.portal.service.impl;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;

import com.ankit.portal.hibernate.util.HibernateUtil;
import com.ankit.portal.service.dao.UserGroupDAO;
import com.ankit.portal.service.domain.Role;
import com.ankit.portal.service.domain.User;
import com.ankit.portal.service.domain.UserGroup;

/**
 * @author Ankit
 * 
 */
public class UserGroupImpl implements UserGroupDAO {

    @Override
    public UserGroup addUserGroup(UserGroup group) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            group = (UserGroup) session.get(UserGroup.class,
                    session.save(group));
            session.getTransaction().commit();
            return group;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public UserGroup getUserGroup(Long id) {
        try {
            Session session = HibernateUtil.getSession();
            UserGroup group = (UserGroup) session.get(UserGroup.class, id);
            return group;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Long getUserGroupCount() {
        try {
            Session session = HibernateUtil.getSession();
            Long count = 0L;
            Query query = session.getNamedQuery("GetUserGroupCount");
            count = (Long) query.uniqueResult();
            return count;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<UserGroup> getUserGroups(Integer startIndex, Integer maxReocrds) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetUserGroups");
            query.setFirstResult(startIndex);
            query.setMaxResults(maxReocrds);
            List<UserGroup> groups = query.list();
            return groups;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public void deleteUserGroup(UserGroup group) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            session.delete(group);
            session.getTransaction().commit();
        } finally {
            HibernateUtil.closeSession();
        }

    }

    @Override
    public void updateUserGroup(UserGroup group) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            session.update(group);
            session.getTransaction().commit();
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<User> getUsers(Long groupId, Integer startIndex,
            Integer maxReocrds) {
        try {
            Session session = HibernateUtil.getSession();
            List<User> users = null;
            Query query = session.getNamedQuery("GetUsersByUserGroupId");
            query.setParameter(0, groupId);
            query.setFirstResult(startIndex);
            query.setMaxResults(maxReocrds);
            users = query.list();
            System.out.println("Got users->" + users.size());
            return users;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Role> getRoles(Long groupId, Integer startIndex,
            Integer maxReocrds) {
        try {
            Session session = HibernateUtil.getSession();
            List<Role> roles = null;
            Query query = session.getNamedQuery("GetRolesByUserGroupId");
            query.setParameter(0, groupId);
            query.setFirstResult(startIndex);
            query.setMaxResults(maxReocrds);
            roles = query.list();
            System.out.println("Got roles->" + roles.size());
            return roles;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public void addRole(Long groupId, Integer roleId) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            UserGroup group = (UserGroup) session.get(UserGroup.class, groupId);
            group.getRoles().add((Role) session.get(Role.class, roleId));
            session.getTransaction().commit();
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public void removeRole(Long groupId, Integer roleId) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            UserGroup group = (UserGroup) session.get(UserGroup.class, groupId);
            group.getRoles().remove(session.get(Role.class, roleId));
            session.getTransaction().commit();
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public void addUser(Long groupId, Long userId) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            UserGroup group = (UserGroup) session.get(UserGroup.class, groupId);
            group.getUsers().add((User) session.get(User.class, userId));
            session.getTransaction().commit();
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public void removeUser(Long groupId, Long userId) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            UserGroup group = (UserGroup) session.get(UserGroup.class, groupId);
            group.getUsers().remove(session.get(User.class, userId));
            session.getTransaction().commit();
        } finally {
            HibernateUtil.closeSession();
        }

    }

    @Override
    public Integer getTotalUsers(Long groupId) {
        try {
            Session session = HibernateUtil.getSession();
            Integer count;
            Query query = session.getNamedQuery("GetUserCountInGroupById");
            query.setParameter(0, groupId);
            count = (Integer) query.uniqueResult();
            return count;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Integer getTotalRoles(Long groupId) {
        try {
            Session session = HibernateUtil.getSession();
            Integer count;
            Query query = session.getNamedQuery("GetRoleCountInGroupById");
            query.setParameter(0, groupId);
            count = (Integer) query.uniqueResult();
            return count;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<UserGroup> getUserGroups(List<Long> ids) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetUserGroupsByIds");
            query.setParameterList("ids", ids);
            List<UserGroup> groups = query.list();
            return groups;
        } finally {
            HibernateUtil.closeSession();
        }
    }
}
