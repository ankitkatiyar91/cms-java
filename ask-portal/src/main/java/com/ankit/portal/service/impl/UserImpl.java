/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On Mar 21, 2014 for the hibernate services of a portal project
 */
package com.ankit.portal.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.Projections;
import org.hibernate.search.FullTextQuery;
import org.hibernate.search.FullTextSession;
import org.hibernate.search.Search;
import org.hibernate.search.query.DatabaseRetrievalMethod;
import org.hibernate.search.query.ObjectLookupMethod;
import org.hibernate.search.query.dsl.QueryBuilder;

import com.ankit.portal.hibernate.util.HibernateUtil;
import com.ankit.portal.service.dao.UserDAO;
import com.ankit.portal.service.domain.Role;
import com.ankit.portal.service.domain.User;
import com.ankit.portal.service.domain.UserGroup;

public class UserImpl implements UserDAO {

    private static final String[] USER_SEARCH_COLUMNS = new String[] { "id",
            "email", "firstName", "middleName", "lastName", "screenName",
            "facebookId", "jobTitle", "country", "street", "city", "contactNo",
            "mobileNo" };

    @Override
    public User getUser(Long userId) {
        try {
            Session session = HibernateUtil.getSession();
            User user = (User) session.get(User.class, userId);
            return user;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public User findByEmail(String email) {
        try {
            Session session = HibernateUtil.getSession();
            User user = (User) session.byNaturalId(User.class)
                    .using("email", email).load();
            return user;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public Set<Role> getRolesByUserId(Long userId) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("loadRolesByUserId");
            query.setCacheable(true);
            query.setLong(0, userId);
            Set<Role> roles = new HashSet<Role>(query.list());
            return roles;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public User addUser(User user) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            user.setLastUpdated(new Date());
            user.setCreated(new Date());
            session.save(user);
            session.getTransaction().commit();
            user = (User) session.byNaturalId(User.class)
                    .using("email", user.getEmail()).load();
            return user;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<User> getUsers() {
        try {
            List<User> users;
            Session session = HibernateUtil.getSession();
            Query query = session.createQuery("from User");
            query.setCacheable(false);
            users = query.list();
            return users;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Long getTotalUsers() {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session
                    .createQuery("select count(*) as c from User where admin=false");
            long count = (Long) query.uniqueResult();
            return count;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<User> getUsers(Integer startIndex, Integer maxReocrds) {
        List<User> users;
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.createQuery("from User where admin=false");
            query.setFirstResult(startIndex);
            query.setMaxResults(maxReocrds);
            query.setCacheable(true);
            users = query.list();
            return users;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public void updateUser(User user) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            user.setLastUpdated(new Date());
            session.update(user);
            session.getTransaction().commit();
        } finally {
            HibernateUtil.closeSession();
        }
    }

    /**
     * Currently This method in not qualified for the search.
     */
    @SuppressWarnings("unchecked")
    @Override
    public List<User> getUsersLike(User user, Integer startIndex,
            Integer maxReocrds) {
        try {
            List<User> users;
            Session session = HibernateUtil.getSession();
            Example example = Example.create(user).enableLike().excludeZeroes()
                    .ignoreCase();
            example.excludeProperty("password");
            example.excludeProperty("passwordModifiedDate");
            example.excludeProperty("passwordEncrypted");
            example.excludeProperty("agreedToTermsOfUse");
            example.excludeProperty("emailAddressVerified");
            example.excludeProperty("gender");
            example.excludeProperty("active");
            example.excludeProperty("admin");
            example.excludeProperty("created");
            example.excludeProperty("lastUpdated");
            Criteria criteria = session.createCriteria(User.class);
            /*
             * if (user.getEmail()!=null && user.getEmail().trim().length()>0) {
             * criteria.add(Restrictions.like("email",SC.PERCENTAGE+
             * user.getEmail()+SC.PERCENTAGE)); } if (user.getFirstName()!=null
             * && user.getFirstName().trim().length()>0) {
             * criteria.add(Restrictions.like("email",SC.PERCENTAGE+
             * user.getEmail()+SC.PERCENTAGE)); }
             */
            criteria.add(example);
            criteria.setFirstResult(startIndex);
            criteria.setMaxResults(maxReocrds);
            criteria.setCacheable(true);
            users = criteria.list();
            return users;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Long getTotalUsersLike(User user) {
        try {
            Long count;
            Session session = HibernateUtil.getSession();
            Example example = Example.create(user).enableLike().excludeZeroes()
                    .ignoreCase();
            example.excludeProperty("password");
            example.excludeProperty("passwordModifiedDate");
            example.excludeProperty("passwordEncrypted");
            example.excludeProperty("agreedToTermsOfUse");
            example.excludeProperty("emailAddressVerified");
            example.excludeProperty("gender");
            example.excludeProperty("active");
            example.excludeProperty("admin");
            example.excludeProperty("created");
            example.excludeProperty("lastUpdated");
            Criteria criteria = session.createCriteria(User.class);
            /*
             * if (user.getEmail()!=null && user.getEmail().trim().length()>0) {
             * criteria.add(Restrictions.like("email",SC.PERCENTAGE+
             * user.getEmail()+SC.PERCENTAGE)); } if (user.getFirstName()!=null
             * && user.getFirstName().trim().length()>0) {
             * criteria.add(Restrictions.like("email",SC.PERCENTAGE+
             * user.getEmail()+SC.PERCENTAGE)); }
             */
            criteria.add(example);
            criteria.setCacheable(true);
            criteria.setProjection(Projections.count("id"));
            count = (Long) criteria.uniqueResult();
            return count;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<UserGroup> getGroupByUserId(Long userId) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("loadGroupsByUserId");
            query.setLong(0, userId);
            List<UserGroup> roles = query.list();
            return roles;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<User> searchUser(String queryString, Integer startIndex,
            Integer maxReocrds) {
        List<User> users = new ArrayList<User>();
        try {
            Session session = HibernateUtil.getSession();
            FullTextSession fullTextSession = Search
                    .getFullTextSession(session);
            QueryBuilder queryBuilder = fullTextSession.getSearchFactory()
                    .buildQueryBuilder().forEntity(User.class).get();
            org.apache.lucene.search.Query query = queryBuilder.keyword()
                    .onFields(USER_SEARCH_COLUMNS).matching(queryString)
                    .createQuery();
            FullTextQuery fullTextQuery = fullTextSession.createFullTextQuery(
                    query, User.class);
            fullTextQuery.limitExecutionTimeTo(5, TimeUnit.SECONDS);
            fullTextQuery.setFirstResult(startIndex);
            fullTextQuery.setMaxResults(maxReocrds);
            fullTextQuery.initializeObjectsWith(ObjectLookupMethod.SECOND_LEVEL_CACHE, DatabaseRetrievalMethod.QUERY);
            users = fullTextQuery.list();
        } finally {
            HibernateUtil.closeSession();
        }
        return users;
    }

    @Override
    public Integer searchUserCount(String queryString) {
        Integer count = 0;
        try {
            Session session = HibernateUtil.getSession();
            FullTextSession fullTextSession = Search
                    .getFullTextSession(session);
            QueryBuilder queryBuilder = fullTextSession.getSearchFactory()
                    .buildQueryBuilder().forEntity(User.class).get();
            org.apache.lucene.search.Query query = queryBuilder.keyword()
                    .onFields(USER_SEARCH_COLUMNS).matching(queryString)
                    .createQuery();
            FullTextQuery fullTextQuery = fullTextSession.createFullTextQuery(
                    query, User.class);
            count = fullTextQuery.getResultSize();
        } finally {
            HibernateUtil.closeSession();
        }
        return count;
    }

}
