/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On Mar 21, 2014 for the hibernate services of a portal project
 */
package com.ankit.portal.service.impl;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;

import com.ankit.portal.exception.NoSuchElementException;
import com.ankit.portal.exception.ServiceException;
import com.ankit.portal.hibernate.util.HibernateUtil;
import com.ankit.portal.service.dao.CategoryDAO;
import com.ankit.portal.service.domain.Category;

public class CategoryImpl implements CategoryDAO {

    @Override
    public Category getCategory(Integer id) throws NoSuchElementException {
        try {
            Session session = HibernateUtil.getSession();
            Category category = (Category) session.get(Category.class, id);
            return category;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Category addCategory(Category category) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            session.save(category);
            session.getTransaction().commit();
            return category;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Category updateCategory(Category category) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            session.update(category);
            session.getTransaction().commit();
            session.clear();
            return category;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Category> getCategories(Integer startIndex, Integer maxRecords)
            throws ServiceException {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetCategory");
            query.setCacheable(true);
            query.setFirstResult(startIndex);
            query.setMaxResults(maxRecords);
            List<Category> categories = query.list();
            return categories;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Integer getMaxSequence() {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetCategoryMaxSequence");
            Integer no = (Integer) query.uniqueResult();
            return no;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Category> getCategoriesByMenuId(Integer menuId,
            Integer startIndex, Integer maxRecords) throws ServiceException {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetCategoryByMenuId");
            query.setCacheable(true);
            query.setInteger(0, menuId);
            query.setFirstResult(startIndex);
            query.setMaxResults(maxRecords);
            List<Category> categories = query.list();
            return categories;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Category> getCategoriesByMenuIdOrderedBySequenceNo(
            Integer menuId, Integer startIndex, Integer maxRecords)
            throws ServiceException {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session
                    .getNamedQuery("GetCategoryByMenuIdOrderedBySequenceNo");
            query.setCacheable(true);
            query.setInteger(0, menuId);
            query.setFirstResult(startIndex);
            query.setMaxResults(maxRecords);
            List<Category> categories = query.list();
            return categories;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Category> getDisplayableCategoryByMenuId(Integer id) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session
                    .getNamedQuery("GetDisplayableCategoryByMenuId");
            query.setInteger(0, id);
            query.setCacheable(true);
            List<Category> categories = query.list();
            return categories;
        } finally {
            HibernateUtil.closeSession();
        }
    }

}
