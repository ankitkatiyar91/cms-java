/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On Mar 2, 2014 for the hibernate services of a portal project
 */
package com.ankit.portal.service.domain;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Cacheable;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.QueryHint;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Source;
import org.hibernate.annotations.SourceType;

import com.ankit.portal.support.StatusType;

/**
 * @author Ankit
 * 
 */
@Entity(name = "SubCategory")
@Table(name = "subcategory")
@Cacheable(value = true)
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@NamedQueries(value = {
        @NamedQuery(name = "GetSubCategory", query = "from SubCategory"),
        @NamedQuery(name = "GetSubCategoryMaxSequence", query = "select max(sequenceNo) from SubCategory"),
        @NamedQuery(name = "GetSubCategoryByCategoryId", query = "from SubCategory s where s.category=?"),
        @NamedQuery(name = "GetSubCategoryByCategoryIdOrderedBySequenceNo", query = "from SubCategory s where s.category=? order by sequenceNo"),
        @NamedQuery(name = "GetDisplayableSubCategoriesByCategoryId", hints = @QueryHint(value = "true", name = "cacheable"), query = "from SubCategory sc where sc.category.id=? and sc.status='PUBLISHED' order by sc.sequenceNo asc")
        //@NamedQuery(name = "GetDisplayableSubCategoriesByCategoryId", hints = @QueryHint(value = "true", name = "cacheable"), query = "from SubCategory sc where sc.category.id=? and sc.status='PUBLISHED' and sc.article!=null  order by sc.sequenceNo asc") 
        })
public class SubCategory implements Serializable {
    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "subcategory_id")
    private Long id;

    @Column(nullable = false, name = "subcategory_label")
    private String label;

    @ManyToOne(targetEntity = Category.class, cascade = CascadeType.DETACH)
    @JoinColumn(name = "category_id", nullable = false)
    private Category category;

    @Column(nullable = false)
    private Integer sequenceNo;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(nullable = false, updatable = false)
    private Date created = new Date();

    @Temporal(TemporalType.TIMESTAMP)
    @Column(nullable = false)
    @Source(SourceType.VM)
    private Date lastUpdated = new Date();

    @Enumerated(value = EnumType.STRING)
    @Column(nullable = false)
    private StatusType status;

    @OneToOne(optional = true, targetEntity = Article.class, cascade = CascadeType.DETACH, fetch = FetchType.EAGER)
    @JoinColumn(name = "article_id")
    private Article article;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    public Category getCategory() {
        return category;
    }

    public void setCategory(Category category) {
        this.category = category;
    }

    public Integer getSequenceNo() {
        return sequenceNo;
    }

    public void setSequenceNo(Integer sequenceNo) {
        this.sequenceNo = sequenceNo;
    }

    public Date getCreated() {
        return created;
    }

    @PrePersist
    private void setCreated(Date created) {
        this.created = created;
    }

    public Date getLastUpdated() {
        return lastUpdated;
    }

    @PreUpdate
    private void setLastUpdated(Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    public StatusType getStatus() {
        return status;
    }

    public void setStatus(StatusType status) {
        this.status = status;
    }

    public Article getArticle() {
        return article;
    }

    public void setArticle(Article article) {
        this.article = article;
    }

    @Override
    public String toString() {
        return "SubCategory [id=" + id + ", label=" + label + ", category="
                + category + ", sequenceNo=" + sequenceNo + ", created="
                + created + ", lastUpdated=" + lastUpdated + ", status="
                + status + "]";
    }

}
