/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On Mar 21, 2014 for the hibernate services of a portal project
 */
package com.ankit.portal.service.impl;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;

import com.ankit.portal.hibernate.util.HibernateUtil;
import com.ankit.portal.service.dao.SubCategoryDAO;
import com.ankit.portal.service.domain.SubCategory;

/**
 * @author Ankit
 * 
 */
public class SubCategoryImpl implements SubCategoryDAO {

    @Override
    public SubCategory addSubCategory(SubCategory subCategory) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            session.save(subCategory);
            session.getTransaction().commit();
            return subCategory;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public SubCategory updateSubCategory(SubCategory subCategory) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            session.update(subCategory);
            session.getTransaction().commit();
            return subCategory;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public SubCategory getSubCategory(Long id) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            SubCategory subCategory = (SubCategory) session.get(
                    SubCategory.class, id);
            session.getTransaction().commit();
            return subCategory;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<SubCategory> getSubCategories(Integer startIndex,
            Integer maxRecords) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetSubCategory");
            query.setFirstResult(startIndex);
            query.setMaxResults(maxRecords);
            query.setCacheable(true);
            List<SubCategory> categories = query.list();
            return categories;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Integer getMaxSequence() {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetSubCategoryMaxSequence");
            query.setCacheable(true);
            Integer no = (Integer) query.uniqueResult();
            return no;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<SubCategory> getSubCategoriesByCategoryId(Integer categoryId,
            Integer startIndex, Integer maxRecords) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetSubCategoryByCategoryId");
            query.setInteger(0, categoryId);
            query.setFirstResult(startIndex);
            query.setMaxResults(maxRecords);
            query.setCacheable(true);
            List<SubCategory> categories = query.list();
            return categories;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<SubCategory> getSubCategoriesByCategoryIdOrderedBySequenceNo(
            Integer categoryId, Integer startIndex, Integer maxRecords) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session
                    .getNamedQuery("GetSubCategoryByCategoryIdOrderedBySequenceNo");
            query.setCacheable(true);
            query.setInteger(0, categoryId);
            query.setFirstResult(startIndex);
            query.setMaxResults(maxRecords);
            List<SubCategory> categories = query.list();
            return categories;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public void deleteSubCategory(Long id) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            session.delete(session.get(SubCategory.class, id));
            session.getTransaction().commit();
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<SubCategory> getDisplayableSubCategoryByCategoryId(Integer id) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session
                    .getNamedQuery("GetDisplayableSubCategoriesByCategoryId");
            query.setInteger(0, id);
            query.setCacheable(true);
            List<SubCategory> categories = query.list();
            return categories;
        } finally {
            HibernateUtil.closeSession();
        }
    }
}
