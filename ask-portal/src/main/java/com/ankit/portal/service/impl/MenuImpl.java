/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On Mar 21, 2014 for the hibernate services of a portal project
 */
package com.ankit.portal.service.impl;

import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

import com.ankit.portal.exception.ServiceException;
import com.ankit.portal.hibernate.util.HibernateUtil;
import com.ankit.portal.service.dao.MenuDAO;
import com.ankit.portal.service.domain.Menu;

public class MenuImpl implements MenuDAO {

    @Override
    public Integer addMenu(Menu menu) throws ServiceException {
        try {
            int updated = 0;
            Session session = HibernateUtil.getSession();
            try {
                session.beginTransaction();
                updated = (Integer) session.save(menu);
                session.getTransaction().commit();
            } catch (Exception e) {
                session.getTransaction().rollback();
                throw new ServiceException(e);
            }
            return updated;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public void updateMenu(Menu menu) throws ServiceException {
        try {
            Session session = HibernateUtil.getSession();
            try {
                session.beginTransaction();
                session.update(menu);
                session.getTransaction().commit();
            } catch (Exception e) {
                session.getTransaction().rollback();
                throw new ServiceException(e);
            }
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Menu> getMenus(Integer startIndex, Integer maxRecords) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("Get");
            query.setCacheable(true);
            query.setFirstResult(startIndex);
            query.setMaxResults(maxRecords);
            List<Menu> menus = query.list();
            return menus;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Integer getTotalMenu() {
        try {
            int count;
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetCount");
            count = ((Long) query.uniqueResult()).intValue();
            return count;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Menu getMenuByLabel(String label) {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetByLabel");
            query.setString(0, label);
            Menu menu = (Menu) query.uniqueResult();
            return menu;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Integer updateSequenceAfter(Integer sequenceNo, Integer updateNumber) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            Query query = session.getNamedQuery("UpdateSequenceNoAfter");
            query.setInteger(0, updateNumber);
            query.setInteger(1, sequenceNo);
            int updated = query.executeUpdate();
            session.getTransaction().commit();
            return updated;
        } catch (HibernateException e) {
            e.printStackTrace();
        } finally {
            HibernateUtil.closeSession();
        }
        return 0;
    }

    @Override
    public Integer updateSequenceBefore(Integer sequenceNo, Integer updateNumber) {
        try {
            Session session = HibernateUtil.getSession();
            session.beginTransaction();
            Query query = session.getNamedQuery("UpdateSequenceNoBefore");
            query.setInteger(0, updateNumber);
            query.setInteger(1, sequenceNo);
            int updated = query.executeUpdate();
            session.getTransaction().commit();
            return updated;
        } catch (HibernateException e) {
            e.printStackTrace();
        } finally {
            HibernateUtil.closeSession();
        }
        return 0;
    }

    @Override
    public Integer maxSequenceNo() {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetMaxSequenceNo");
            Integer sequenceNo = (Integer) query.uniqueResult();
            return sequenceNo;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public Menu getMenu(Integer menuId) {
        try {
            Session session = HibernateUtil.getSession();
            Menu menu = (Menu) session.get(Menu.class, menuId);
            return menu;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public List<Menu> getMenusOrderedBySequenceNo(Integer startIndex,
            Integer maxRecords) throws ServiceException {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetOrderedBySequenceNo");
            query.setCacheable(true);
            query.setFirstResult(startIndex);
            query.setMaxResults(maxRecords);
            List<Menu> menus = query.list();
            return menus;
        } finally {
            HibernateUtil.closeSession();
        }
    }

    @Override
    public List<Menu> getDispayableMenus() {
        try {
            Session session = HibernateUtil.getSession();
            Query query = session.getNamedQuery("GetDisplayableMenu");
            query.setCacheable(true);
            @SuppressWarnings("unchecked")
            List<Menu> menus = query.list();
            return menus;
        } finally {
            HibernateUtil.closeSession();
        }
    }

}
