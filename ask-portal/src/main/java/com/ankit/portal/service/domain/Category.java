/**
 * This file is generated by Ankit Singh Katiyar
 * Generated On Mar 2, 2014 for the hibernate services of a portal project
 */
package com.ankit.portal.service.domain;

import java.io.Serializable;
import java.util.Date;
import java.util.Set;
import java.util.TreeSet;

import javax.persistence.Cacheable;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.OrderBy;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Source;
import org.hibernate.annotations.SourceType;

import com.ankit.portal.support.StatusType;

/**
 * {@link Category} defines the sub-menu. For example if menu is 'Core Java'
 * sub-menu could be 'Interface'
 * 
 * @author Ankit
 * 
 */
@NamedQueries(value = {
		@NamedQuery(name = "GetCategory", query = "from Category"),
		@NamedQuery(name = "GetCategoryMaxSequence", query = "select max(sequenceNo) from Category"),
		@NamedQuery(name = "GetCategoryByMenuId", query = "from Category c where c.menu=?"),
		@NamedQuery(name = "GetCategoryByMenuIdOrderedBySequenceNo", query = "from Category c where c.menu=? order by sequenceNo"),
		@NamedQuery(name = "GetDisplayableCategoryByMenuId", query = "from Category c where c.menu=? and c.status='PUBLISHED' order by c.sequenceNo ") })
@Entity(name = "Category")
@Table(name = "category")
@Cacheable(value = true)
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Category implements Comparable<Category>, Serializable {

	/**
     * 
     */
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "category_id")
	private Integer id;

	@Column(nullable = false, name = "category_label")
	private String label;

	@ManyToOne(fetch = FetchType.EAGER, optional = false, targetEntity = Menu.class)
	@JoinColumn(name = "menu_id")
	private Menu menu;

	@Column(nullable = false)
	@OrderBy(value = "sequenceNo")
	private Integer sequenceNo;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(nullable = false, updatable = false)
	private Date created = new Date();

	@Temporal(TemporalType.TIMESTAMP)
	@Column(nullable = false)
	@Source(SourceType.VM)
	private Date lastUpdated = new Date();

	@Enumerated(value = EnumType.STRING)
	@Column(nullable = false)
	private StatusType status;

	@OneToMany(fetch = FetchType.LAZY, targetEntity = SubCategory.class, mappedBy = "category", cascade = CascadeType.DETACH)
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	private Set<SubCategory> subCategories = new TreeSet<SubCategory>();

	@OneToOne(optional = true, targetEntity = Article.class)
	@JoinColumn(name = "article_id")
	private Article article;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getLabel() {
		return label;
	}

	public void setLabel(String label) {
		this.label = label;
	}

	public Menu getMenu() {
		return menu;
	}

	public void setMenu(Menu menu) {
		this.menu = menu;
	}

	public Integer getSequenceNo() {
		return sequenceNo;
	}

	public void setSequenceNo(Integer sequenceNo) {
		this.sequenceNo = sequenceNo;
	}

	public Date getCreated() {
		return created;
	}

	@PrePersist
	private void setCreated(Date created) {
		this.created = created;
	}

	public Date getLastUpdated() {
		return lastUpdated;
	}

	@PreUpdate
	private void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	public StatusType getStatus() {
		return status;
	}

	public void setStatus(StatusType status) {
		this.status = status;
	}

	public Article getArticle() {
		return article;
	}

	public void setArticle(Article article) {
		this.article = article;
	}

	public Set<SubCategory> getSubCategories() {
		return subCategories;
	}

	public void setSubCategories(Set<SubCategory> subCategories) {
		this.subCategories = subCategories;
	}

	@Override
	public String toString() {
		return "Category [id=" + id + ", label=" + label + ", menu=" + menu
				+ ", sequenceNo=" + sequenceNo + ", created=" + created
				+ ", lastUpdated=" + lastUpdated + ", status=" + status + "]";
	}

	/**
	 * This method provides sorting of Categories on the basis of sequence no
	 * 
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	public int compareTo(Category o) {
		return (this.getSequenceNo() - o.getSequenceNo());
	}

}
